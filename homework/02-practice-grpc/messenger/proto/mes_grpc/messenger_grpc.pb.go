// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: messenger.proto

package mes_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessengerServerClient is the client API for MessengerServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessengerServerClient interface {
	SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*Time, error)
	ReadMessages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MessengerServer_ReadMessagesClient, error)
}

type messengerServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengerServerClient(cc grpc.ClientConnInterface) MessengerServerClient {
	return &messengerServerClient{cc}
}

func (c *messengerServerClient) SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*Time, error) {
	out := new(Time)
	err := c.cc.Invoke(ctx, "/mes_grpc.MessengerServer/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerServerClient) ReadMessages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MessengerServer_ReadMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessengerServer_ServiceDesc.Streams[0], "/mes_grpc.MessengerServer/ReadMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerServerReadMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessengerServer_ReadMessagesClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type messengerServerReadMessagesClient struct {
	grpc.ClientStream
}

func (x *messengerServerReadMessagesClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessengerServerServer is the server API for MessengerServer service.
// All implementations must embed UnimplementedMessengerServerServer
// for forward compatibility
type MessengerServerServer interface {
	SendMessage(context.Context, *ChatMessage) (*Time, error)
	ReadMessages(*Empty, MessengerServer_ReadMessagesServer) error
	mustEmbedUnimplementedMessengerServerServer()
}

// UnimplementedMessengerServerServer must be embedded to have forward compatible implementations.
type UnimplementedMessengerServerServer struct {
}

func (UnimplementedMessengerServerServer) SendMessage(context.Context, *ChatMessage) (*Time, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessengerServerServer) ReadMessages(*Empty, MessengerServer_ReadMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadMessages not implemented")
}
func (UnimplementedMessengerServerServer) mustEmbedUnimplementedMessengerServerServer() {}

// UnsafeMessengerServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessengerServerServer will
// result in compilation errors.
type UnsafeMessengerServerServer interface {
	mustEmbedUnimplementedMessengerServerServer()
}

func RegisterMessengerServerServer(s grpc.ServiceRegistrar, srv MessengerServerServer) {
	s.RegisterService(&MessengerServer_ServiceDesc, srv)
}

func _MessengerServer_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServerServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mes_grpc.MessengerServer/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServerServer).SendMessage(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessengerServer_ReadMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessengerServerServer).ReadMessages(m, &messengerServerReadMessagesServer{stream})
}

type MessengerServer_ReadMessagesServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type messengerServerReadMessagesServer struct {
	grpc.ServerStream
}

func (x *messengerServerReadMessagesServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

// MessengerServer_ServiceDesc is the grpc.ServiceDesc for MessengerServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessengerServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mes_grpc.MessengerServer",
	HandlerType: (*MessengerServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessengerServer_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadMessages",
			Handler:       _MessengerServer_ReadMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messenger.proto",
}
