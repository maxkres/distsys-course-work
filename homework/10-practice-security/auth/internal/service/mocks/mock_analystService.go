// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RipperAcskt/innotaxi/internal/service (interfaces: AnalystService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/RipperAcskt/innotaxi/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAnalystService is a mock of AnalystService interface.
type MockAnalystService struct {
	ctrl     *gomock.Controller
	recorder *MockAnalystServiceMockRecorder
}

// MockAnalystServiceMockRecorder is the mock recorder for MockAnalystService.
type MockAnalystServiceMockRecorder struct {
	mock *MockAnalystService
}

// NewMockAnalystService creates a new mock instance.
func NewMockAnalystService(ctrl *gomock.Controller) *MockAnalystService {
	mock := &MockAnalystService{ctrl: ctrl}
	mock.recorder = &MockAnalystServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalystService) EXPECT() *MockAnalystServiceMockRecorder {
	return m.recorder
}

// SendRegistrationEvent mocks base method.
func (m *MockAnalystService) SendRegistrationEvent(arg0 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRegistrationEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRegistrationEvent indicates an expected call of SendRegistrationEvent.
func (mr *MockAnalystServiceMockRecorder) SendRegistrationEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRegistrationEvent", reflect.TypeOf((*MockAnalystService)(nil).SendRegistrationEvent), arg0)
}
